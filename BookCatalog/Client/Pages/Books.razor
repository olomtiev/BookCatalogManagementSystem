@page "/books"
@using BookCatalog.Client.Services;
@using BookCatalog.Shared;
@using Microsoft.AspNetCore.Components
@inject BookService BookService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inherits OwningComponentBase

<link href="css/books.css" rel="stylesheet" /> 

<h3>Books</h3>

<div class="header-container">
    <div class="search-container">
        <input type="text" @bind="_searchTitle" placeholder="Title" />
        <input type="text" @bind="_searchAuthor" placeholder="Author" />
        <input type="text" @bind="_searchGenre" placeholder="Genre" />
        <button @onclick="SearchBooks">Search</button>
    </div>
     
    <div class="header-buttons">
        <div>
            <label class="file-upload-label">
                Import
                <InputFile OnChange="HandleFileUpload" class="file-input" /> 
            </label>
        </div>
        <button class="btn-primary" @onclick="CreateBook">Add New Book</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>Published Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
         @foreach (var book in filteredBooks)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Genre</td>
                <td>@book.PublishedDate.ToString("yyyy-MM-dd")</td>
                <td>
                    <button class="btn-warning" @onclick="() => EditBook(book.Id)">Edit</button>
                    <button class="btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(!CanNavigateBack)">Previous</button>
    <span>Page @currentPage of @totalPages</span>
    <button @onclick="NextPage" disabled="@(!CanNavigateNext)">Next</button>
</div>




@code {
    private List<Book> books = new List<Book>();
    private List<Book> filteredBooks = new List<Book>();

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalItems = 0;

    private string searchTitle = "";
    private string searchAuthor = "";
    private string searchGenre = "";

    private string _searchTitle = "";
    private string _searchAuthor = "";
    private string _searchGenre = "";

    private bool CanNavigateBack => currentPage > 1;
    private bool CanNavigateNext => currentPage < totalPages;
     
    private async Task SearchBooks()
    {
        searchTitle = _searchTitle;
        searchAuthor = _searchAuthor;
        searchGenre = _searchGenre;
        currentPage = 1;
        await LoadBooks();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        var result = await BookService.SearchBooksAsync(searchTitle, searchAuthor, searchGenre, currentPage, pageSize); 
        if (result != null)
        {
            books = result.Data;
            totalItems = result.TotalItems;
            totalPages = result.TotalPages;
            filteredBooks = books;
        }
    }

    private void EditBook(int id)
    {
        NavigationManager.NavigateTo($"/edit-book/{id}");
    }

    private async Task DeleteBook(int id)
    {
        await BookService.DeleteBookAsync(id); 

        totalItems--;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
        if (currentPage > totalPages && currentPage > 1)
        {
            currentPage--;
        }

        await LoadBooks();
    }

    private void CreateBook()
    {
        NavigationManager.NavigateTo("/add-book");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            await BookService.HandleFileUpload(e);
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Wrong file!");
        }
        await LoadBooks();  
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadBooks();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadBooks();
        }
    }
}
